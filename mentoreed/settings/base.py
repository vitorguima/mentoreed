"""
Django settings for mentoreed project.

Generated by "django-admin startproject" using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

import environ

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / "subdir".
# raises 3 levels from the current file path
ROOT_DIR = Path(__file__).resolve().parent.parent.parent


APP_DIR = ROOT_DIR / "core_apps"

DEBUG = env.bool("DJANGO_DEBUG", False)

# Application definition
ADMIN_APPS = [
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    "django.contrib.admin",
]

DJANGO_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # powers more than one site and you need to differentiate between those sites in some way.
    # https://docs.djangoproject.com/en/5.0/ref/contrib/sites/
    "django.contrib.sites",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    # Authentication and authorization for Django REST Framework
    "rest_framework_simplejwt.token_blacklist",
    "rest_framework.authtoken",
    # Registration
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "django_extensions",
    "django_filters",
    "django_countries",
    "phonenumber_field",
    "drf_yasg",
    "corsheaders",
    "djcelery_email",
]

LOCAL_APPS = [
    "core_apps.users",
    "core_apps.jwt",
]

INSTALLED_APPS = ADMIN_APPS + DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "mentoreed.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mentoreed.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {"default": env.db("DATABASE_URL")}


# https://docs.djangoproject.com/en/5.0/topics/auth/passwords/
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": {
        "core_apps.jwt.jwt_auth.JWTCookieAuthentication",
        # "rest_framework_simp
        # lejwt.authentication.JWTAuthentication",
    },
    "DEFAULT_THROTTLE_RATES": {
        "register": "5/minute",
    },
}


# Authentication settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "SIGNING_KEY": env("JWT_SIGNING_KEY"),
    "JWT_AUTH_HTTPONLY": True,
    "JWT_AUTH_RETURN_EXPIRATION": False,
}
USE_JWT = True
LOGIN_SERIALIZER = "core_apps.jwt.serializers.LoginSerializer"
JWT_SERIALIZER = "core_apps.jwt.serializers.JWTSerializer"
JWT_SERIALIZER_WITH_EXPIRATION = (
    "core_apps.jwt.serializers.JWTSerializerWithExpiration",
)
JWT_TOKEN_CLAIMS_SERIALIZER = (
    "rest_framework_simplejwt.serializers.TokenObtainPairSerializer"
)
TOKEN_MODEL = "rest_framework.authtoken.models.Token"
SESSION_LOGIN = True
USER_DETAILS_SERIALIZER = "core_apps.users.serializers.UserDetailsSerializer"

# Registration settings
REGISTER_SERIALIZER = "core_apps.jwt.serializers.RegisterSerializer"
REGISTER_PERMISSION_CLASSES = ("rest_framework.permissions.AllowAny",)
# Allauth settings
# ref: https://docs.allauth.org/en/dev/account/configuration.html#configuration
ACCOUNT_USERNAME_MIN_LENGTH = 6
ACCOUNT_SIGNUP_FIELDS = ["email", "username*", "password1*", "password2*"]
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = "none"


AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "core_apps.users.permissions.UsersPermissionsBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID = 1

ADMIN_URL = "admin/"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = "/staticfiles/"
STATIC_ROOT = str(ROOT_DIR / "staticfiles")

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = str(ROOT_DIR / "mediafiles")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Used by the `django-cors-headers` package
# Which urls should have the cors headers added to their responses
CORS_URLS_REGEX = r"Ã¢pi/.*$"

CELERY_BROKER_URL = env("CELERY_BROKER")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
CELERY_TASK_SEND_SENT_EVENT = True

if USE_TZ:
    CELERY_TIMEZONE = TIME_ZONE

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(name)-12s %(asctime)s %(module)s "
            "%(process)d %(thread)d %(message)s"
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        }
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}

# Defines the swappable user model for the project.
AUTH_USER_MODEL = "users.User"


# Unfold settings
UNFOLD = {
    "SITE_TITLE": "Mentoreed",
    "SITE_HEADER": "Mentoreed",
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
    },
}
