services:
  # not using it for now
  # es:
  #   image: elasticsearch:7.17.9
  #   environment:
  #     - discovery.type=single-node
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - reverseproxy_nw

  api:
    build:
      context: .
      dockerfile: ./docker/production/django/Dockerfile
    command: /start
    image: mentoreed
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    depends_on:
      - postgres
      - redis
      # - es
    networks:
      - reverseproxy_nw

  postgres:
    build:
      context: .
      dockerfile: ./docker/production/postgres/Dockerfile
    image: mentoreed_database
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres
    networks:
      - reverseproxy_nw

  redis:
    image: redis:7-alpine
    networks:
      - reverseproxy_nw

  celery_worker:
    image: mentoreed
    command: /start-celerywork
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    depends_on:
      - postgres
      - redis
      - es
    networks:
      - reverseproxy_nw

  flower:
    image: mentoreed
    command: /start-flower
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - flower_data:/data
    depends_on:
      - postgres
      - redis
      # - es
    networks:
      - reverseproxy_nw

networks:
  reverseproxy_nw:
    external: true

volumes:
  static_volume: {}
  media_volume: {}
  production_postgres_data: {}
  production_postgres_data_backups: {}
  flower_data: {}
